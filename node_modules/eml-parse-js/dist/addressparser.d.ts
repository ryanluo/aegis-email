/**
 * Creates a Tokenizer object for tokenizing address field strings
 *
 * @constructor
 * @param {String} str Address field string
 */
export declare class Tokenizer {
    str: string;
    operatorCurrent: string;
    operatorExpecting: string;
    node: any;
    escaped: boolean;
    list: any[];
    operators: any;
    constructor(str: any);
    /**
     * Tokenizes the original input string
     *
     * @return {Array} An array of operator|text tokens
     */
    tokenize(): any[];
    /**
     * Checks if a character is an operator or text and acts accordingly
     *
     * @param {String} chr Character from the address field
     */
    checkChar(chr: any): void;
}
/**
 * Parses structured e-mail addresses from an address field
 *
 * Example:
 *
 *    'Name <address@domain>'
 *
 * will be converted to
 *
 *     [{name: 'Name', address: 'address@domain'}]
 *
 * @param {String} str Address field
 * @return {Array} An array of address objects
 */
export declare function addressparser(str: any, options?: any): {
    name?: string;
    address?: string;
}[];
